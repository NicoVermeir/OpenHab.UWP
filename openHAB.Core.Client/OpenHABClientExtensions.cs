// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace openHAB.Core.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpenHABClient.
    /// </summary>
    public static partial class OpenHABClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetRoot(this IOpenHABClient operations)
            {
                operations.GetRootAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetRootAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetRootWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the default sink if defined or the first available sink.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetAudioDefaultSink(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                operations.GetAudioDefaultSinkAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the default sink if defined or the first available sink.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioDefaultSinkAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioDefaultSinkWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the default source if defined or the first available source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetAudioDefaultSource(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                operations.GetAudioDefaultSourceAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the default source if defined or the first available source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioDefaultSourceAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioDefaultSourceWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of all sinks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetAudioSinks(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                operations.GetAudioSinksAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all sinks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioSinksAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioSinksWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of all sources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetAudioSources(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                operations.GetAudioSourcesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all sources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioSourcesAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioSourcesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static IList<BindingInfoDTO> GetAllBindings(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAllBindingsAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BindingInfoDTO>> GetAllBindingsAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllBindingsWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get binding configuration for given binding ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            public static string GetBindingConfigurationByUID(this IOpenHABClient operations, string bindingId)
            {
                return operations.GetBindingConfigurationByUIDAsync(bindingId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get binding configuration for given binding ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetBindingConfigurationByUIDAsync(this IOpenHABClient operations, string bindingId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBindingConfigurationByUIDWithHttpMessagesAsync(bindingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a binding configuration for given binding ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            public static string UpdateBindingConfiguration(this IOpenHABClient operations, string bindingId, IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                return operations.UpdateBindingConfigurationAsync(bindingId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a binding configuration for given binding ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateBindingConfigurationAsync(this IOpenHABClient operations, string bindingId, IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBindingConfigurationWithHttpMessagesAsync(bindingId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available channel types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<ChannelTypeDTO> GetAllChannelTypes(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAllChannelTypesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available channel types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChannelTypeDTO>> GetAllChannelTypesAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllChannelTypesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets channel type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ChannelTypeDTO GetChannelTypeByUID(this IOpenHABClient operations, string channelTypeUID, string acceptLanguage = default(string))
            {
                return operations.GetChannelTypeByUIDAsync(channelTypeUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets channel type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChannelTypeDTO> GetChannelTypeByUIDAsync(this IOpenHABClient operations, string channelTypeUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChannelTypeByUIDWithHttpMessagesAsync(channelTypeUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the item types the given trigger channel type UID can be linked to.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            public static IList<string> GetLinkableItemTypesByChannelTypeUID(this IOpenHABClient operations, string channelTypeUID)
            {
                return operations.GetLinkableItemTypesByChannelTypeUIDAsync(channelTypeUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the item types the given trigger channel type UID can be linked to.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetLinkableItemTypesByChannelTypeUIDAsync(this IOpenHABClient operations, string channelTypeUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLinkableItemTypesByChannelTypeUIDWithHttpMessagesAsync(channelTypeUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available config descriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='scheme'>
            /// scheme filter
            /// </param>
            public static IList<ConfigDescriptionDTO> GetAllConfigDescriptions(this IOpenHABClient operations, string acceptLanguage = default(string), string scheme = default(string))
            {
                return operations.GetAllConfigDescriptionsAsync(acceptLanguage, scheme).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available config descriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='scheme'>
            /// scheme filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigDescriptionDTO>> GetAllConfigDescriptionsAsync(this IOpenHABClient operations, string acceptLanguage = default(string), string scheme = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllConfigDescriptionsWithHttpMessagesAsync(acceptLanguage, scheme, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a config description by URI.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// uri
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ConfigDescriptionDTO GetConfigDescriptionByURI(this IOpenHABClient operations, string uri, string acceptLanguage = default(string))
            {
                return operations.GetConfigDescriptionByURIAsync(uri, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a config description by URI.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// uri
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigDescriptionDTO> GetConfigDescriptionByURIAsync(this IOpenHABClient operations, string uri, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigDescriptionByURIWithHttpMessagesAsync(uri, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all bindings that support discovery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetDiscoveryServices(this IOpenHABClient operations)
            {
                return operations.GetDiscoveryServicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all bindings that support discovery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetDiscoveryServicesAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiscoveryServicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts asynchronous discovery process for a binding and returns the timeout
            /// in seconds of the discovery operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// bindingId
            /// </param>
            public static int? Scan(this IOpenHABClient operations, string bindingId)
            {
                return operations.ScanAsync(bindingId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts asynchronous discovery process for a binding and returns the timeout
            /// in seconds of the discovery operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// bindingId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> ScanAsync(this IOpenHABClient operations, string bindingId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ScanWithHttpMessagesAsync(bindingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string GetExtensions(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetExtensionsAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetExtensionsAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionsWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all extension types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string GetExtensionTypes(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetExtensionTypesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all extension types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetExtensionTypesAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionTypesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Installs the extension from the given URL.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// extension install URL
            /// </param>
            public static void InstallExtensionByURL(this IOpenHABClient operations, string url)
            {
                operations.InstallExtensionByURLAsync(url).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Installs the extension from the given URL.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// extension install URL
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InstallExtensionByURLAsync(this IOpenHABClient operations, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InstallExtensionByURLWithHttpMessagesAsync(url, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get extension with given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string GetExtensionById(this IOpenHABClient operations, string extensionId, string acceptLanguage = default(string))
            {
                return operations.GetExtensionByIdAsync(extensionId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get extension with given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetExtensionByIdAsync(this IOpenHABClient operations, string extensionId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionByIdWithHttpMessagesAsync(extensionId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Installs the extension with the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            public static void InstallExtension(this IOpenHABClient operations, string extensionId)
            {
                operations.InstallExtensionAsync(extensionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Installs the extension with the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InstallExtensionAsync(this IOpenHABClient operations, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InstallExtensionWithHttpMessagesAsync(extensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            public static void UninstallExtension(this IOpenHABClient operations, string extensionId)
            {
                operations.UninstallExtensionAsync(extensionId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UninstallExtensionAsync(this IOpenHABClient operations, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UninstallExtensionWithHttpMessagesAsync(extensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of widget gallery items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            public static string GetGalleryWidgetList(this IOpenHABClient operations, string galleryName)
            {
                return operations.GetGalleryWidgetListAsync(galleryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of widget gallery items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetGalleryWidgetListAsync(this IOpenHABClient operations, string galleryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGalleryWidgetListWithHttpMessagesAsync(galleryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details about a widget gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            /// <param name='id'>
            /// id within the gallery
            /// </param>
            public static string GetGalleryWidgetsItem(this IOpenHABClient operations, string galleryName, string id)
            {
                return operations.GetGalleryWidgetsItemAsync(galleryName, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details about a widget gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            /// <param name='id'>
            /// id within the gallery
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetGalleryWidgetsItemAsync(this IOpenHABClient operations, string galleryName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGalleryWidgetsItemWithHttpMessagesAsync(galleryName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static void GetAllIconSets(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                operations.GetAllIconSetsAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAllIconSetsAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAllIconSetsWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all discovered things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DiscoveryResultDTO GetAllDiscoveredThings(this IOpenHABClient operations)
            {
                return operations.GetAllDiscoveredThingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all discovered things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscoveryResultDTO> GetAllDiscoveredThingsAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDiscoveredThingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the discovery result from the inbox.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            public static void DeleteThingFromInboxById(this IOpenHABClient operations, string thingUID)
            {
                operations.DeleteThingFromInboxByIdAsync(thingUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the discovery result from the inbox.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteThingFromInboxByIdAsync(this IOpenHABClient operations, string thingUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteThingFromInboxByIdWithHttpMessagesAsync(thingUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Approves the discovery result by adding the thing to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='body'>
            /// thing label
            /// </param>
            public static void ApproveDiscoveryThingById(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string))
            {
                operations.ApproveDiscoveryThingByIdAsync(thingUID, acceptLanguage, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approves the discovery result by adding the thing to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='body'>
            /// thing label
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveDiscoveryThingByIdAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveDiscoveryThingByIdWithHttpMessagesAsync(thingUID, acceptLanguage, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Flags a discovery result as ignored for further processing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            public static void IgnoreDiscoveryThingById(this IOpenHABClient operations, string thingUID)
            {
                operations.IgnoreDiscoveryThingByIdAsync(thingUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Flags a discovery result as ignored for further processing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task IgnoreDiscoveryThingByIdAsync(this IOpenHABClient operations, string thingUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.IgnoreDiscoveryThingByIdWithHttpMessagesAsync(thingUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes ignore flag from a discovery result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            public static void UnignoreDiscoveryThingById(this IOpenHABClient operations, string thingUID)
            {
                operations.UnignoreDiscoveryThingByIdAsync(thingUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes ignore flag from a discovery result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnignoreDiscoveryThingByIdAsync(this IOpenHABClient operations, string thingUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnignoreDiscoveryThingByIdWithHttpMessagesAsync(thingUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all available items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// item type filter
            /// </param>
            /// <param name='tags'>
            /// item tag filter
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            /// <param name='recursive'>
            /// get member items recursively
            /// </param>
            /// <param name='fields'>
            /// limit output to the given fields (comma separated)
            /// </param>
            public static IList<EnrichedItemDTO> GetItems(this IOpenHABClient operations, string acceptLanguage = default(string), string type = default(string), string tags = default(string), string metadata = default(string), bool? recursive = false, string fields = default(string))
            {
                return operations.GetItemsAsync(acceptLanguage, type, tags, metadata, recursive, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// item type filter
            /// </param>
            /// <param name='tags'>
            /// item tag filter
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            /// <param name='recursive'>
            /// get member items recursively
            /// </param>
            /// <param name='fields'>
            /// limit output to the given fields (comma separated)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EnrichedItemDTO>> GetItemsAsync(this IOpenHABClient operations, string acceptLanguage = default(string), string type = default(string), string tags = default(string), string metadata = default(string), bool? recursive = false, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsWithHttpMessagesAsync(acceptLanguage, type, tags, metadata, recursive, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a list of items to the registry or updates the existing items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// array of item data
            /// </param>
            public static string CreateOrUpdateItems(this IOpenHABClient operations, IList<GroupItemDTO> body)
            {
                return operations.CreateOrUpdateItemsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a list of items to the registry or updates the existing items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// array of item data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateOrUpdateItemsAsync(this IOpenHABClient operations, IList<GroupItemDTO> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateItemsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new member to a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            public static void AddMemberToItem(this IOpenHABClient operations, string itemName, string memberItemName)
            {
                operations.AddMemberToItemAsync(itemName, memberItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new member to a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddMemberToItemAsync(this IOpenHABClient operations, string itemName, string memberItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddMemberToItemWithHttpMessagesAsync(itemName, memberItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes an existing member from a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            public static void RemoveMemberFromItem(this IOpenHABClient operations, string itemName, string memberItemName)
            {
                operations.RemoveMemberFromItemAsync(itemName, memberItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an existing member from a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveMemberFromItemAsync(this IOpenHABClient operations, string itemName, string memberItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveMemberFromItemWithHttpMessagesAsync(itemName, memberItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            public static EnrichedItemDTO GetItemData(this IOpenHABClient operations, string itemname, string acceptLanguage = default(string), string metadata = default(string))
            {
                return operations.GetItemDataAsync(itemname, acceptLanguage, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrichedItemDTO> GetItemDataAsync(this IOpenHABClient operations, string itemname, string acceptLanguage = default(string), string metadata = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemDataWithHttpMessagesAsync(itemname, acceptLanguage, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a command to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)
            /// </param>
            public static void PostItemCommand(this IOpenHABClient operations, string itemname, string body)
            {
                operations.PostItemCommandAsync(itemname, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a command to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemCommandAsync(this IOpenHABClient operations, string itemname, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemCommandWithHttpMessagesAsync(itemname, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a new item to the registry or updates the existing item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// item data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string CreateOrUpdateItem(this IOpenHABClient operations, string itemname, GroupItemDTO body, string acceptLanguage = default(string))
            {
                return operations.CreateOrUpdateItemAsync(itemname, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new item to the registry or updates the existing item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// item data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateOrUpdateItemAsync(this IOpenHABClient operations, string itemname, GroupItemDTO body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateItemWithHttpMessagesAsync(itemname, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes an item from the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            public static void RemoveItem(this IOpenHABClient operations, string itemname)
            {
                operations.RemoveItemAsync(itemname).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an item from the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveItemAsync(this IOpenHABClient operations, string itemname, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveItemWithHttpMessagesAsync(itemname, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds metadata to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            /// <param name='body'>
            /// metadata
            /// </param>
            public static void AddMetadataToItem(this IOpenHABClient operations, string itemname, string namespaceParameter, MetadataDTO body)
            {
                operations.AddMetadataToItemAsync(itemname, namespaceParameter, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds metadata to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            /// <param name='body'>
            /// metadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddMetadataToItemAsync(this IOpenHABClient operations, string itemname, string namespaceParameter, MetadataDTO body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddMetadataToItemWithHttpMessagesAsync(itemname, namespaceParameter, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes metadata from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            public static void RemoveMetadataFromItem(this IOpenHABClient operations, string itemname, string namespaceParameter)
            {
                operations.RemoveMetadataFromItemAsync(itemname, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes metadata from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveMetadataFromItemAsync(this IOpenHABClient operations, string itemname, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveMetadataFromItemWithHttpMessagesAsync(itemname, namespaceParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            public static string GetPlainItemState(this IOpenHABClient operations, string itemname)
            {
                return operations.GetPlainItemStateAsync(itemname).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetPlainItemStateAsync(this IOpenHABClient operations, string itemname, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlainItemStateWithHttpMessagesAsync(itemname, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item state (e.g. ON, OFF)
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void PutItemState(this IOpenHABClient operations, string itemname, string body, string acceptLanguage = default(string))
            {
                operations.PutItemStateAsync(itemname, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item state (e.g. ON, OFF)
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutItemStateAsync(this IOpenHABClient operations, string itemname, string body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutItemStateWithHttpMessagesAsync(itemname, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a tag to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            public static void AddTagToItem(this IOpenHABClient operations, string itemname, string tag)
            {
                operations.AddTagToItemAsync(itemname, tag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a tag to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddTagToItemAsync(this IOpenHABClient operations, string itemname, string tag, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddTagToItemWithHttpMessagesAsync(itemname, tag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes a tag from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            public static void RemoveTagFromItem(this IOpenHABClient operations, string itemname, string tag)
            {
                operations.RemoveTagFromItemAsync(itemname, tag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a tag from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveTagFromItemAsync(this IOpenHABClient operations, string itemname, string tag, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveTagFromItemWithHttpMessagesAsync(itemname, tag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all available links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ItemChannelLinkDTO GetAllLinks(this IOpenHABClient operations)
            {
                return operations.GetAllLinksAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemChannelLinkDTO> GetAllLinksAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLinksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tells whether automatic link mode is active or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static bool? IsLinkAutomaticModeEnabled(this IOpenHABClient operations)
            {
                return operations.IsLinkAutomaticModeEnabledAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tells whether automatic link mode is active or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsLinkAutomaticModeEnabledAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsLinkAutomaticModeEnabledWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            public static void GetLinkByItemNameAndChannelId(this IOpenHABClient operations, string itemName, string channelUID)
            {
                operations.GetLinkByItemNameAndChannelIdAsync(itemName, channelUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLinkByItemNameAndChannelIdAsync(this IOpenHABClient operations, string itemName, string channelUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLinkByItemNameAndChannelIdWithHttpMessagesAsync(itemName, channelUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Links item to a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='body'>
            /// link data
            /// </param>
            public static void LinkItemToChannel(this IOpenHABClient operations, string itemName, string channelUID, ItemChannelLinkDTO body = default(ItemChannelLinkDTO))
            {
                operations.LinkItemToChannelAsync(itemName, channelUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Links item to a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='body'>
            /// link data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LinkItemToChannelAsync(this IOpenHABClient operations, string itemName, string channelUID, ItemChannelLinkDTO body = default(ItemChannelLinkDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LinkItemToChannelWithHttpMessagesAsync(itemName, channelUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unlinks item from a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            public static void UnlinkItemFromChannel(this IOpenHABClient operations, string itemName, string channelUID)
            {
                operations.UnlinkItemFromChannelAsync(itemName, channelUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unlinks item from a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnlinkItemFromChannelAsync(this IOpenHABClient operations, string itemName, string channelUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnlinkItemFromChannelWithHttpMessagesAsync(itemName, channelUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all available module types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='tags'>
            /// tags for filtering
            /// </param>
            /// <param name='type'>
            /// filtering by action, condition or trigger
            /// </param>
            public static IList<ModuleTypeDTO> GetAllModuleTypes(this IOpenHABClient operations, string acceptLanguage = default(string), string tags = default(string), string type = default(string))
            {
                return operations.GetAllModuleTypesAsync(acceptLanguage, tags, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available module types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='tags'>
            /// tags for filtering
            /// </param>
            /// <param name='type'>
            /// filtering by action, condition or trigger
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ModuleTypeDTO>> GetAllModuleTypesAsync(this IOpenHABClient operations, string acceptLanguage = default(string), string tags = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllModuleTypesWithHttpMessagesAsync(acceptLanguage, tags, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a module type corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moduleTypeUID'>
            /// moduleTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ModuleTypeDTO GetModuleTypeByUID(this IOpenHABClient operations, string moduleTypeUID, string acceptLanguage = default(string))
            {
                return operations.GetModuleTypeByUIDAsync(moduleTypeUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a module type corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moduleTypeUID'>
            /// moduleTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModuleTypeDTO> GetModuleTypeByUIDAsync(this IOpenHABClient operations, string moduleTypeUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleTypeByUIDWithHttpMessagesAsync(moduleTypeUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of persistence services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<string> GetPersistenceServices(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetPersistenceServicesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of persistence services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetPersistenceServicesAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersistenceServicesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of items available via a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            public static IList<string> GetPersistenceServiceItems(this IOpenHABClient operations, string serviceId = default(string))
            {
                return operations.GetPersistenceServiceItemsAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of items available via a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetPersistenceServiceItemsAsync(this IOpenHABClient operations, string serviceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersistenceServiceItemsWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets item persistence data from the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. Will default to 1 day before endtime.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='page'>
            /// Page number of data to return. This parameter will enable paging.
            /// </param>
            /// <param name='pagelength'>
            /// The length of each page.
            /// </param>
            /// <param name='boundary'>
            /// Gets one value before and after the requested period.
            /// </param>
            public static ItemHistoryDTO GetPersistenceItemData(this IOpenHABClient operations, string itemname, string serviceId = default(string), string starttime = default(string), string endtime = default(string), int? page = default(int?), int? pagelength = default(int?), bool? boundary = default(bool?))
            {
                return operations.GetPersistenceItemDataAsync(itemname, serviceId, starttime, endtime, page, pagelength, boundary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets item persistence data from the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. Will default to 1 day before endtime.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='page'>
            /// Page number of data to return. This parameter will enable paging.
            /// </param>
            /// <param name='pagelength'>
            /// The length of each page.
            /// </param>
            /// <param name='boundary'>
            /// Gets one value before and after the requested period.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemHistoryDTO> GetPersistenceItemDataAsync(this IOpenHABClient operations, string itemname, string serviceId = default(string), string starttime = default(string), string endtime = default(string), int? page = default(int?), int? pagelength = default(int?), bool? boundary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersistenceItemDataWithHttpMessagesAsync(itemname, serviceId, starttime, endtime, page, pagelength, boundary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stores item persistence data into the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='time'>
            /// Time of the data to be stored. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='state'>
            /// The state to store.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            public static ItemHistoryDTO InsertPersistenceItemData(this IOpenHABClient operations, string itemname, string time, string state, string serviceId = default(string))
            {
                return operations.InsertPersistenceItemDataAsync(itemname, time, state, serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stores item persistence data into the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='time'>
            /// Time of the data to be stored. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='state'>
            /// The state to store.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemHistoryDTO> InsertPersistenceItemDataAsync(this IOpenHABClient operations, string itemname, string time, string state, string serviceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InsertPersistenceItemDataWithHttpMessagesAsync(itemname, time, state, serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete item data from a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            public static IList<string> DeletePersistenceServiceItemData(this IOpenHABClient operations, string serviceId, string itemname, string starttime, string endtime)
            {
                return operations.DeletePersistenceServiceItemDataAsync(serviceId, itemname, starttime, endtime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete item data from a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> DeletePersistenceServiceItemDataAsync(this IOpenHABClient operations, string serviceId, string itemname, string starttime, string endtime, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersistenceServiceItemDataWithHttpMessagesAsync(serviceId, itemname, starttime, endtime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available profile types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='channelTypeUID'>
            /// channel type filter
            /// </param>
            /// <param name='itemType'>
            /// item type filter
            /// </param>
            public static IList<ProfileTypeDTO> GetAllProfileTypes(this IOpenHABClient operations, string acceptLanguage = default(string), string channelTypeUID = default(string), string itemType = default(string))
            {
                return operations.GetAllProfileTypesAsync(acceptLanguage, channelTypeUID, itemType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available profile types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='channelTypeUID'>
            /// channel type filter
            /// </param>
            /// <param name='itemType'>
            /// item type filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProfileTypeDTO>> GetAllProfileTypesAsync(this IOpenHABClient operations, string acceptLanguage = default(string), string channelTypeUID = default(string), string itemType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllProfileTypesWithHttpMessagesAsync(acceptLanguage, channelTypeUID, itemType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available rules, optionally filtered by tags and/or prefix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='prefix'>
            /// </param>
            /// <param name='tags'>
            /// </param>
            public static EnrichedRuleDTO GetRules(this IOpenHABClient operations, string prefix = default(string), IList<string> tags = default(IList<string>))
            {
                return operations.GetRulesAsync(prefix, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available rules, optionally filtered by tags and/or prefix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='prefix'>
            /// </param>
            /// <param name='tags'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrichedRuleDTO> GetRulesAsync(this IOpenHABClient operations, string prefix = default(string), IList<string> tags = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRulesWithHttpMessagesAsync(prefix, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// rule data
            /// </param>
            public static CreateRuleHeaders CreateRule(this IOpenHABClient operations, RuleDTO body)
            {
                return operations.CreateRuleAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// rule data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateRuleHeaders> CreateRuleAsync(this IOpenHABClient operations, RuleDTO body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRuleWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the rule corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static EnrichedRuleDTO GetRuleByUID(this IOpenHABClient operations, string ruleUID)
            {
                return operations.GetRuleByUIDAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the rule corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrichedRuleDTO> GetRuleByUIDAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRuleByUIDWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing rule corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='body'>
            /// rule data
            /// </param>
            public static void UpdateRule(this IOpenHABClient operations, string ruleUID, RuleDTO body)
            {
                operations.UpdateRuleAsync(ruleUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing rule corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='body'>
            /// rule data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRuleAsync(this IOpenHABClient operations, string ruleUID, RuleDTO body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateRuleWithHttpMessagesAsync(ruleUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes an existing rule corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static string RemoveRule(this IOpenHABClient operations, string ruleUID)
            {
                return operations.RemoveRuleAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an existing rule corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RemoveRuleAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveRuleWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the rule actions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static IList<ActionDTO> GetRuleActions(this IOpenHABClient operations, string ruleUID)
            {
                return operations.GetRuleActionsAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the rule actions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ActionDTO>> GetRuleActionsAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRuleActionsWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the rule conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static IList<ConditionDTO> GetRuleConditions(this IOpenHABClient operations, string ruleUID)
            {
                return operations.GetRuleConditionsAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the rule conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConditionDTO>> GetRuleConditionsAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRuleConditionsWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the rule configuration values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static string GetConfiguration(this IOpenHABClient operations, string ruleUID)
            {
                return operations.GetConfigurationAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the rule configuration values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConfigurationAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the rule configuration values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='body'>
            /// config
            /// </param>
            public static void UpdateConfiguration(this IOpenHABClient operations, string ruleUID, IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                operations.UpdateConfigurationAsync(ruleUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the rule configuration values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='body'>
            /// config
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateConfigurationAsync(this IOpenHABClient operations, string ruleUID, IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateConfigurationWithHttpMessagesAsync(ruleUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets the rule enabled status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='body'>
            /// enable
            /// </param>
            public static void EnableRule(this IOpenHABClient operations, string ruleUID, string body)
            {
                operations.EnableRuleAsync(ruleUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the rule enabled status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='body'>
            /// enable
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EnableRuleAsync(this IOpenHABClient operations, string ruleUID, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EnableRuleWithHttpMessagesAsync(ruleUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Executes actions of the rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static void RunNow(this IOpenHABClient operations, string ruleUID)
            {
                operations.RunNowAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes actions of the rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RunNowAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RunNowWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the rule triggers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            public static IList<TriggerDTO> GetTriggers(this IOpenHABClient operations, string ruleUID)
            {
                return operations.GetTriggersAsync(ruleUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the rule triggers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TriggerDTO>> GetTriggersAsync(this IOpenHABClient operations, string ruleUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggersWithHttpMessagesAsync(ruleUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the rule's module corresponding to the given Category and ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static ModuleDTO GetModuleById(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id)
            {
                return operations.GetModuleByIdAsync(ruleUID, moduleCategory, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the rule's module corresponding to the given Category and ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModuleDTO> GetModuleByIdAsync(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleByIdWithHttpMessagesAsync(ruleUID, moduleCategory, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the module's configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static string GetModuleConfig(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id)
            {
                return operations.GetModuleConfigAsync(ruleUID, moduleCategory, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the module's configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetModuleConfigAsync(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleConfigWithHttpMessagesAsync(ruleUID, moduleCategory, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the module's configuration parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='param'>
            /// param
            /// </param>
            public static string GetModuleConfigParam(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id, string param)
            {
                return operations.GetModuleConfigParamAsync(ruleUID, moduleCategory, id, param).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the module's configuration parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='param'>
            /// param
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetModuleConfigParamAsync(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id, string param, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleConfigParamWithHttpMessagesAsync(ruleUID, moduleCategory, id, param, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the module's configuration parameter value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='param'>
            /// param
            /// </param>
            /// <param name='body'>
            /// value
            /// </param>
            public static void SetModuleConfigParam(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id, string param, string body)
            {
                operations.SetModuleConfigParamAsync(ruleUID, moduleCategory, id, param, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the module's configuration parameter value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleUID'>
            /// ruleUID
            /// </param>
            /// <param name='moduleCategory'>
            /// moduleCategory
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='param'>
            /// param
            /// </param>
            /// <param name='body'>
            /// value
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetModuleConfigParamAsync(this IOpenHABClient operations, string ruleUID, string moduleCategory, string id, string param, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetModuleConfigParamWithHttpMessagesAsync(ruleUID, moduleCategory, id, param, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all configurable services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ConfigurableServiceDTO> GetAll(this IOpenHABClient operations)
            {
                return operations.GetAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all configurable services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigurableServiceDTO>> GetAllAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get configurable service for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static ConfigurableServiceDTO GetById(this IOpenHABClient operations, string serviceId)
            {
                return operations.GetByIdAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get configurable service for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurableServiceDTO> GetByIdAsync(this IOpenHABClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get service configuration for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static string GetConfiguration1(this IOpenHABClient operations, string serviceId)
            {
                return operations.GetConfiguration1Async(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get service configuration for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConfiguration1Async(this IOpenHABClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfiguration1WithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            public static string UpdateConfiguration1(this IOpenHABClient operations, string serviceId, IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                return operations.UpdateConfiguration1Async(serviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateConfiguration1Async(this IOpenHABClient operations, string serviceId, IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfiguration1WithHttpMessagesAsync(serviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static string DeleteConfiguration(this IOpenHABClient operations, string serviceId)
            {
                return operations.DeleteConfigurationAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteConfigurationAsync(this IOpenHABClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteConfigurationWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get existing multiple context service configurations for the given factory
            /// PID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static IList<ConfigurableServiceDTO> GetMultiConfigServicesByFactoryPid(this IOpenHABClient operations, string serviceId)
            {
                return operations.GetMultiConfigServicesByFactoryPidAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get existing multiple context service configurations for the given factory
            /// PID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigurableServiceDTO>> GetMultiConfigServicesByFactoryPidAsync(this IOpenHABClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiConfigServicesByFactoryPidWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all available sitemaps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetSitemaps(this IOpenHABClient operations)
            {
                operations.GetSitemapsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available sitemaps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSitemapsAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSitemapsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a sitemap event subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object CreateEventSubscription(this IOpenHABClient operations)
            {
                return operations.CreateEventSubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a sitemap event subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEventSubscriptionAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get sitemap events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionid'>
            /// subscription id
            /// </param>
            /// <param name='sitemap'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            public static void GetSitemapEvents(this IOpenHABClient operations, string subscriptionid, string sitemap = default(string), string pageid = default(string))
            {
                operations.GetSitemapEventsAsync(subscriptionid, sitemap, pageid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get sitemap events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionid'>
            /// subscription id
            /// </param>
            /// <param name='sitemap'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSitemapEventsAsync(this IOpenHABClient operations, string subscriptionid, string sitemap = default(string), string pageid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSitemapEventsWithHttpMessagesAsync(subscriptionid, sitemap, pageid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get sitemap by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='jsoncallback'>
            /// </param>
            /// <param name='includeHidden'>
            /// include hidden widgets
            /// </param>
            public static void GetSitemapData(this IOpenHABClient operations, string sitemapname, string acceptLanguage = default(string), string type = default(string), string jsoncallback = "callback", bool? includeHidden = default(bool?))
            {
                operations.GetSitemapDataAsync(sitemapname, acceptLanguage, type, jsoncallback, includeHidden).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get sitemap by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='jsoncallback'>
            /// </param>
            /// <param name='includeHidden'>
            /// include hidden widgets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSitemapDataAsync(this IOpenHABClient operations, string sitemapname, string acceptLanguage = default(string), string type = default(string), string jsoncallback = "callback", bool? includeHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSitemapDataWithHttpMessagesAsync(sitemapname, acceptLanguage, type, jsoncallback, includeHidden, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Polls the data for a sitemap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='subscriptionid'>
            /// subscriptionid
            /// </param>
            /// <param name='includeHidden'>
            /// include hidden widgets
            /// </param>
            public static void GetPageData(this IOpenHABClient operations, string sitemapname, string pageid, string acceptLanguage = default(string), string subscriptionid = default(string), bool? includeHidden = default(bool?))
            {
                operations.GetPageDataAsync(sitemapname, pageid, acceptLanguage, subscriptionid, includeHidden).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Polls the data for a sitemap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='subscriptionid'>
            /// subscriptionid
            /// </param>
            /// <param name='includeHidden'>
            /// include hidden widgets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPageDataAsync(this IOpenHABClient operations, string sitemapname, string pageid, string acceptLanguage = default(string), string subscriptionid = default(string), bool? includeHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPageDataWithHttpMessagesAsync(sitemapname, pageid, acceptLanguage, subscriptionid, includeHidden, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all available templates.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static Template GetAll1(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAll1Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available templates.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Template> GetAll1Async(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll1WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a template corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateUID'>
            /// templateUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static Template GetByUID(this IOpenHABClient operations, string templateUID, string acceptLanguage = default(string))
            {
                return operations.GetByUIDAsync(templateUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a template corresponding to the given UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateUID'>
            /// templateUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Template> GetByUIDAsync(this IOpenHABClient operations, string templateUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByUIDWithHttpMessagesAsync(templateUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available thing types without config description, channels and
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<StrippedThingTypeDTO> GetAll2(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAll2Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available thing types without config description, channels and
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StrippedThingTypeDTO>> GetAll2Async(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll2WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingTypeUID'>
            /// thingTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ThingTypeDTO GetByUID1(this IOpenHABClient operations, string thingTypeUID, string acceptLanguage = default(string))
            {
                return operations.GetByUID1Async(thingTypeUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingTypeUID'>
            /// thingTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingTypeDTO> GetByUID1Async(this IOpenHABClient operations, string thingTypeUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByUID1WithHttpMessagesAsync(thingTypeUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all available things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static IList<EnrichedThingDTO> GetAll3(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAll3Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EnrichedThingDTO>> GetAll3Async(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll3WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new thing and adds it to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// thing data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string Create(this IOpenHABClient operations, ThingDTO body, string acceptLanguage = default(string))
            {
                return operations.CreateAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new thing and adds it to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// thing data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateAsync(this IOpenHABClient operations, ThingDTO body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ThingDTO GetByUID2(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string))
            {
                return operations.GetByUID2Async(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingDTO> GetByUID2Async(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByUID2WithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a thing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='body'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ThingDTO Update(this IOpenHABClient operations, string thingUID, ThingDTO body, string acceptLanguage = default(string))
            {
                return operations.UpdateAsync(thingUID, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a thing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='body'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingDTO> UpdateAsync(this IOpenHABClient operations, string thingUID, ThingDTO body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(thingUID, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a thing from the registry. Set 'force' to __true__ if you want the
            /// thing te be removed immediately.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='force'>
            /// force
            /// </param>
            public static void Remove(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), bool? force = false)
            {
                operations.RemoveAsync(thingUID, acceptLanguage, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a thing from the registry. Set 'force' to __true__ if you want the
            /// thing te be removed immediately.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='force'>
            /// force
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), bool? force = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(thingUID, acceptLanguage, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates thing's configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// configuration parameters
            /// </param>
            public static ThingDTO UpdateConfiguration2(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                return operations.UpdateConfiguration2Async(thingUID, acceptLanguage, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates thing's configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// configuration parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingDTO> UpdateConfiguration2Async(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfiguration2WithHttpMessagesAsync(thingUID, acceptLanguage, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing's config status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static string GetConfigStatus(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string))
            {
                return operations.GetConfigStatusAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing's config status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConfigStatusAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigStatusWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the thing enabled status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// enabled
            /// </param>
            public static string SetEnabled(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string))
            {
                return operations.SetEnabledAsync(thingUID, acceptLanguage, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the thing enabled status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// enabled
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> SetEnabledAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetEnabledWithHttpMessagesAsync(thingUID, acceptLanguage, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing's firmware status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static void GetFirmwareStatus(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string))
            {
                operations.GetFirmwareStatusAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing's firmware status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetFirmwareStatusAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetFirmwareStatusWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update thing firmware.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='firmwareVersion'>
            /// version
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void UpdateFirmware(this IOpenHABClient operations, string thingUID, string firmwareVersion, string acceptLanguage = default(string))
            {
                operations.UpdateFirmwareAsync(thingUID, firmwareVersion, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update thing firmware.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='firmwareVersion'>
            /// version
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateFirmwareAsync(this IOpenHABClient operations, string thingUID, string firmwareVersion, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateFirmwareWithHttpMessagesAsync(thingUID, firmwareVersion, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all available firmwares for provided thing UID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static void GetFirmwares(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string))
            {
                operations.GetFirmwaresAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available firmwares for provided thing UID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetFirmwaresAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetFirmwaresWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets thing's status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static string GetStatus(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string))
            {
                return operations.GetStatusAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing's status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetStatusAsync(this IOpenHABClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A unified unique id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetInstanceUUID(this IOpenHABClient operations)
            {
                return operations.GetInstanceUUIDAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// A unified unique id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetInstanceUUIDAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceUUIDWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the default voice.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetDefaultVoice(this IOpenHABClient operations)
            {
                operations.GetDefaultVoiceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the default voice.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDefaultVoiceAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDefaultVoiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of all interpreters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetInterpreters(this IOpenHABClient operations, string acceptLanguage = default(string))
            {
                operations.GetInterpretersAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all interpreters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInterpretersAsync(this IOpenHABClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetInterpretersWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends a text to the default human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void Interpret(this IOpenHABClient operations, string body, string acceptLanguage = default(string))
            {
                operations.InterpretAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a text to the default human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InterpretAsync(this IOpenHABClient operations, string body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InterpretWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetInterpreter(this IOpenHABClient operations, string id, string acceptLanguage = default(string))
            {
                operations.GetInterpreterAsync(id, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInterpreterAsync(this IOpenHABClient operations, string id, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetInterpreterWithHttpMessagesAsync(id, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends a text to a given human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void Interpret1(this IOpenHABClient operations, string body, string id, string acceptLanguage = default(string))
            {
                operations.Interpret1Async(body, id, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a text to a given human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Interpret1Async(this IOpenHABClient operations, string body, string id, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Interpret1WithHttpMessagesAsync(body, id, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Speaks a given text with a given voice through the given audio sink.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to speak
            /// </param>
            /// <param name='voiceid'>
            /// voice id
            /// </param>
            /// <param name='sinkid'>
            /// audio sink id
            /// </param>
            public static void Say(this IOpenHABClient operations, string body, string voiceid = default(string), string sinkid = default(string))
            {
                operations.SayAsync(body, voiceid, sinkid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Speaks a given text with a given voice through the given audio sink.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to speak
            /// </param>
            /// <param name='voiceid'>
            /// voice id
            /// </param>
            /// <param name='sinkid'>
            /// audio sink id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SayAsync(this IOpenHABClient operations, string body, string voiceid = default(string), string sinkid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SayWithHttpMessagesAsync(body, voiceid, sinkid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of all voices.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetVoices(this IOpenHABClient operations)
            {
                operations.GetVoicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all voices.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVoicesAsync(this IOpenHABClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVoicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
