// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace openHAB.Core.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class EnrichedRuleDTO
    {
        /// <summary>
        /// Initializes a new instance of the EnrichedRuleDTO class.
        /// </summary>
        public EnrichedRuleDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EnrichedRuleDTO class.
        /// </summary>
        /// <param name="visibility">Possible values include: 'VISIBLE',
        /// 'HIDDEN', 'EXPERT'</param>
        public EnrichedRuleDTO(IList<TriggerDTO> triggers = default(IList<TriggerDTO>), IList<ConditionDTO> conditions = default(IList<ConditionDTO>), IList<ActionDTO> actions = default(IList<ActionDTO>), IDictionary<string, object> configuration = default(IDictionary<string, object>), IList<ConfigDescriptionParameterDTO> configDescriptions = default(IList<ConfigDescriptionParameterDTO>), string templateUID = default(string), string uid = default(string), string name = default(string), IList<string> tags = default(IList<string>), string visibility = default(string), string description = default(string), RuleStatusInfo status = default(RuleStatusInfo))
        {
            Triggers = triggers;
            Conditions = conditions;
            Actions = actions;
            Configuration = configuration;
            ConfigDescriptions = configDescriptions;
            TemplateUID = templateUID;
            Uid = uid;
            Name = name;
            Tags = tags;
            Visibility = visibility;
            Description = description;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "triggers")]
        public IList<TriggerDTO> Triggers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<ConditionDTO> Conditions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        public IList<ActionDTO> Actions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configuration")]
        public IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configDescriptions")]
        public IList<ConfigDescriptionParameterDTO> ConfigDescriptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "templateUID")]
        public string TemplateUID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'VISIBLE', 'HIDDEN', 'EXPERT'
        /// </summary>
        [JsonProperty(PropertyName = "visibility")]
        public string Visibility { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public RuleStatusInfo Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Tags != null)
            {
                if (Tags.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Tags)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Tags");
                }
            }
        }
    }
}
