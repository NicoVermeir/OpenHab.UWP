// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace openHAB.Core.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ModuleTypeDTO
    {
        /// <summary>
        /// Initializes a new instance of the ModuleTypeDTO class.
        /// </summary>
        public ModuleTypeDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ModuleTypeDTO class.
        /// </summary>
        /// <param name="visibility">Possible values include: 'VISIBLE',
        /// 'HIDDEN', 'EXPERT'</param>
        public ModuleTypeDTO(string uid = default(string), string visibility = default(string), IList<string> tags = default(IList<string>), string label = default(string), string description = default(string), IList<ConfigDescriptionParameterDTO> configDescriptions = default(IList<ConfigDescriptionParameterDTO>))
        {
            Uid = uid;
            Visibility = visibility;
            Tags = tags;
            Label = label;
            Description = description;
            ConfigDescriptions = configDescriptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'VISIBLE', 'HIDDEN', 'EXPERT'
        /// </summary>
        [JsonProperty(PropertyName = "visibility")]
        public string Visibility { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configDescriptions")]
        public IList<ConfigDescriptionParameterDTO> ConfigDescriptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Tags != null)
            {
                if (Tags.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Tags)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Tags");
                }
            }
        }
    }
}
